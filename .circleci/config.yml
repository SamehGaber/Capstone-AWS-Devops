version: 2.1

commands:
  destroy-environment:
    description: Destroy EC2 instance with k8s cluster on top of its given a workflow ID.
    parameters:
      WorkflowID:
        description:
        type: string
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "my code <<parameters.WorkflowID>>"
            aws cloudformation delete-stack --stack-name "Capstone-${CIRCLE_WORKFLOW_ID:0:7}"
            #aws cloudformation delete-stack --stack-name "Capstone-20ef7de"
orbs:
  aws-eks: circleci/aws-eks@1.0.3
  kubernetes: circleci/kubernetes@0.11.2
            
jobs:
  pre-test:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: pre-test
          command: |
            echo "pre-test"
      - destroy-environment:
          WorkflowID: "${CIRCLE_WORKFLOW_ID}"
  lint:
    docker:
      - image: python:3.7.3-stretch
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint

  Build:
    machine: true
    steps:
      - checkout
      - run:
          name: Docker image build
          command: |
           sudo usermod -aG docker $(whoami)
           chmod +x run_docker.sh
           ./run_docker.sh    
      - run:
          name:  push image to DockerHub
          command: |
           chmod +x upload_docker.sh
           ./upload_docker.sh         
           
      - destroy-environment:
          WorkflowID: "${CIRCLE_WORKFLOW_ID}"
 

  test:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            yum -y install tar gzip
            echo "what !"
            aws --version
            aws s3 ls 
            echo "[web]" > ~/project/.circleci/ansible/inventory.txt
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=Capstone-7c9beb3" --output text >> ~/project/.circleci/ansible/inventory.txt
      - run:
         name: save backend url in memstash
         command: |
            BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=Capstone-7c9beb3" --output text )
            echo $BACKEND_IP
            curl -H "Content-Type: text/plain" -H "token: 0279bc18-c002-44d8-a814-575be01ed402" \
            --request PUT \
            --data "http://$BACKEND_IP:3030" \
            http://api.memstash.io/values/Backend_URL 
                       
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure EC2 instance  exists  
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/EC2.yml \
              --stack-name "Capstone-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
        
      - run:
          name: Add EC2 ip to ansible inventory
          command: |
            yum -y install tar gzip
            echo "[web]" > ~/project/.circleci/ansible/inventory.txt
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=Capstone-${CIRCLE_WORKFLOW_ID:0:7}" --output text >> ~/project/.circleci/ansible/inventory.txt
            echo ${CIRCLE_WORKFLOW_ID:0:7}
 

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      
      - destroy-environment:
          WorkflowID: "${CIRCLE_WORKFLOW_ID}"

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11

    steps:
      - checkout
      - add_ssh_keys:
           fingerprints:
             - "e9:b7:ef:6b:70:b2:56:dc:c8:41:d7:12:6c:b7:a9:7e"    # Add ssh keys with fingerprint #this is "uda-people key"
      - attach_workspace:       # attach workspace.
         at: ~/
      - run: cat ~/project/.circleci/ansible/inventory.txt   
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible 
      - run:
          name: Configure server
          command: |
            ansible-playbook ~/project/.circleci/ansible/configure-server.yml -i ~/project/.circleci/ansible/inventory.txt 
      # Here's where you will add some code to rollback on failure      
      - destroy-environment:
          WorkflowID: "${CIRCLE_WORKFLOW_ID}" 

          
workflows:
  default:
    jobs:
#     - pre-test
#     - test
      - lint
      - Build:
         requires: [lint]     
      - deploy-infrastructure:
          requires: [Build]
      - configure-infrastructure:
          requires: [deploy-infrastructure]    #require ,deploy-infrastructure ,test

   
   
  
    
 

 

    
  